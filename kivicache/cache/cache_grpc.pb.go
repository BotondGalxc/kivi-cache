// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cache/cache.proto

package cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KiviCacheService_Put_FullMethodName    = "/cache.KiviCacheService/Put"
	KiviCacheService_Get_FullMethodName    = "/cache.KiviCacheService/Get"
	KiviCacheService_Delete_FullMethodName = "/cache.KiviCacheService/Delete"
)

// KiviCacheServiceClient is the client API for KiviCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiviCacheServiceClient interface {
	Put(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*KeyValue, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type kiviCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKiviCacheServiceClient(cc grpc.ClientConnInterface) KiviCacheServiceClient {
	return &kiviCacheServiceClient{cc}
}

func (c *kiviCacheServiceClient) Put(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, KiviCacheService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiviCacheServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*KeyValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, KiviCacheService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiviCacheServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, KiviCacheService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KiviCacheServiceServer is the server API for KiviCacheService service.
// All implementations must embed UnimplementedKiviCacheServiceServer
// for forward compatibility.
type KiviCacheServiceServer interface {
	Put(context.Context, *KeyValue) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*KeyValue, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedKiviCacheServiceServer()
}

// UnimplementedKiviCacheServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKiviCacheServiceServer struct{}

func (UnimplementedKiviCacheServiceServer) Put(context.Context, *KeyValue) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKiviCacheServiceServer) Get(context.Context, *GetRequest) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKiviCacheServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKiviCacheServiceServer) mustEmbedUnimplementedKiviCacheServiceServer() {}
func (UnimplementedKiviCacheServiceServer) testEmbeddedByValue()                          {}

// UnsafeKiviCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiviCacheServiceServer will
// result in compilation errors.
type UnsafeKiviCacheServiceServer interface {
	mustEmbedUnimplementedKiviCacheServiceServer()
}

func RegisterKiviCacheServiceServer(s grpc.ServiceRegistrar, srv KiviCacheServiceServer) {
	// If the following call pancis, it indicates UnimplementedKiviCacheServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KiviCacheService_ServiceDesc, srv)
}

func _KiviCacheService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiviCacheServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KiviCacheService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiviCacheServiceServer).Put(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiviCacheService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiviCacheServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KiviCacheService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiviCacheServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiviCacheService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiviCacheServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KiviCacheService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiviCacheServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KiviCacheService_ServiceDesc is the grpc.ServiceDesc for KiviCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KiviCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.KiviCacheService",
	HandlerType: (*KiviCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KiviCacheService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KiviCacheService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KiviCacheService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache/cache.proto",
}
